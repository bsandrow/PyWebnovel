[tool.poetry]
name = "PyWebnovel"
version = "1"
license = "MIT"
description = "Library for scraping and dealing with webnovels."
authors = ["Brandy Sandrowicz <brandy@sandrowicz.org>"]
packages = [
  { include = "webnovel" }
]

[tool.poetry.scripts]
pywn = "webnovel.cli:pywn"

# [[tool.poetry.source]]
# name = "private pypi"
# url = "https://devpi.example.com/example/example/+simple/"

[tool.pytest.ini_options]
markers = [
  "live: marks tests as requiring an Internet connection because they hit live websites."
]

[tool.poetry.dependencies]
python = "~3.10"
requests = "^2.28.1"
cloudscraper = {git = "https://github.com/bsandrow/cloudscraper.git", rev = "dev"}
# cloudscraper = "^1.2.66"
beautifulsoup4 = "^4.11.1"
apptk = {git = "https://github.com/bsandrow/python-apptk.git", rev = "v1.4.3"}
Jinja2 = "^3.1.2"
requests-ratelimiter = "^0.4.0"
click = "^8.1.3"
imgkit = "^1.2.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
freezegun = "^1.0.0"
black = "^22.3.0"
pydocstyle = "^6.1.1"
deepdiff = "^5.0.2"
pylint = "^2.12.2"
ipython = "^8.7.0"
pytest-cov = "^4.0.0"
requests-mock = "^1.10.0"
coverage = {extras = ["toml"], version = "^7.2.2"}

[tool.poetry.group.test.dependencies]
deepdiff = "^5.0.2"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
freezegun = "^1.2.2"
requests-mock = "^1.10.0"
coverage = {extras = ["toml"], version = "^7.2.2"}

[tool.black]
line-length = 120
target-version = ['py39']

[tool.isort]
line_length = 120
force_single_line = false
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
force_sort_within_sections = true
# Compatibility with black. Taken directly from the black docs here:
# https://black.readthedocs.io/en/stable/the_black_code_style.html
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
profile = "black"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.coverage.run]
branch = true
source = ["webnovel", "tests"]
# omit = ["tests/fixtures/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]

[tool.coverage.html]
directory = "cov_html"
